{\rtf1\ansi\ansicpg1252\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red195\green123\blue90;\red23\green23\blue26;\red174\green176\blue183;
\red185\green101\blue173;\red164\green160\blue78;\red71\green149\blue242;\red89\green158\blue96;\red38\green157\blue169;
\red103\green107\blue114;}
{\*\expandedcolortbl;;\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c68235\c69020\c71765;
\csgenericrgb\c72549\c39608\c67843;\csgenericrgb\c64314\c62745\c30588;\csgenericrgb\c27843\c58431\c94902;\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c14902\c61569\c66275;
\csgenericrgb\c40392\c41961\c44706;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 package \cf4 swp.com.gitfx;\
\
\cf2 import \cf4 javafx.application.Application;\
\cf2 import \cf4 javafx.scene.Scene;\
\cf2 import \cf4 javafx.scene.control.*;\
\cf2 import \cf4 javafx.scene.layout.VBox;\
\cf2 import \cf4 javafx.stage.DirectoryChooser;\
\cf2 import \cf4 javafx.stage.Stage;\
\cf2 import \cf4 javafx.scene.web.WebView;\
\cf2 import \cf4 org.eclipse.jgit.api.Git;\
\cf2 import \cf4 org.eclipse.jgit.api.errors.GitAPIException;\
\cf2 import \cf4 org.eclipse.jgit.transport.URIish;\
\cf2 import \cf4 org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;\
\cf2 import \cf4 org.kohsuke.github.*;\
\cf2 import \cf4 org.eclipse.jgit.api.InitCommand;\
\
\cf2 import \cf4 java.io.File;\
\cf2 import \cf4 java.io.IOException;\
\cf2 import \cf4 java.net.URISyntaxException;\
\cf2 import \cf4 java.util.List;\
\cf2 import \cf4 java.util.logging.Level;\
\cf2 import \cf4 java.util.logging.Logger;\
\cf2 import \cf4 java.util.stream.Collectors;\
\
\cf2 public class \cf4 GitFXApplication \cf2 extends \cf4 Application\
\{\
\
    \cf2 private static final \cf4 Logger 
\f1\i \cf5 logger 
\f0\i0 \cf4 = Logger.
\f1\i getLogger
\f0\i0 (GitFXApplication.\cf2 class\cf4 .getName());\
\
    \cf2 private \cf4 ComboBox<String> \cf5 projectComboBox\cf4 ;\
    \cf2 private \cf4 ComboBox<String> \cf5 repoComboBox\cf4 ;\
    \cf2 private \cf4 WebView \cf5 webView\cf4 ;\
\
    \cf6 @Override\
    \cf2 public void \cf7 start\cf4 (Stage stage) \{\
        
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Starting GitFXApplication"\cf4 );\
\
        VBox root = \cf2 new \cf4 VBox(\cf9 10\cf4 );\
        root.setPadding(\cf2 new \cf4 javafx.geometry.Insets(\cf9 10\cf4 ));\
\
        Label projectLabel = \cf2 new \cf4 Label(\cf8 "Select Project:"\cf4 );\
        \cf5 projectComboBox \cf4 = \cf2 new \cf4 ComboBox<>();\
        Button browseButton = \cf2 new \cf4 Button(\cf8 "Browse Projects"\cf4 );\
        browseButton.setOnAction(e -> browseProjects(\cf5 stage\cf4 ));\
\
        Label repoLabel = \cf2 new \cf4 Label(\cf8 "Select Repository:"\cf4 );\
        \cf5 repoComboBox \cf4 = \cf2 new \cf4 ComboBox<>();\
        \cf5 repoComboBox\cf4 .setOnAction(e -> displaySelectedRepo());\
\
        Button pushButton = \cf2 new \cf4 Button(\cf8 "Push to GitHub"\cf4 );\
        \cf5 webView \cf4 = \cf2 new \cf4 WebView();\
\
        pushButton.setOnAction(e -> pushToGitHub());\
\
        root.getChildren().addAll(projectLabel, \cf5 projectComboBox\cf4 , browseButton, repoLabel, \cf5 repoComboBox\cf4 , pushButton, \cf5 webView\cf4 );\
\
        Scene scene = \cf2 new \cf4 Scene(root, \cf9 600\cf4 , \cf9 400\cf4 );\
        stage.setTitle(\cf8 "GitFX"\cf4 );\
        stage.setScene(scene);\
        stage.show();\
\
        loadRepositories(); \cf10 // Move this call after the webView initialization\
    \cf4 \}\
\
    \cf2 private void \cf7 browseProjects\cf4 (Stage stage) \{\
        
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Browsing projects"\cf4 );\
\
        DirectoryChooser directoryChooser = \cf2 new \cf4 DirectoryChooser();\
        directoryChooser.setTitle(\cf8 "Select Project Directory"\cf4 );\
        File selectedDirectory = directoryChooser.showDialog(stage);\
\
        \cf2 if \cf4 (selectedDirectory != \cf2 null\cf4 ) \{\
            List<String> projects = List.
\f1\i of
\f0\i0 (selectedDirectory.list((dir, name) -> \cf2 new \cf4 File(dir, name).isDirectory()));\
            \cf5 projectComboBox\cf4 .getItems().setAll(projects.stream().map(name -> \cf5 selectedDirectory\cf4 .getAbsolutePath() + \cf8 "/" \cf4 + name).collect(Collectors.
\f1\i toList
\f0\i0 ()));\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Projects loaded: " \cf4 + projects);\
\
            \cf10 // Initialize Git repository if not already initialized\
            \cf2 for \cf4 (String project : projects) \{\
                File gitDir = \cf2 new \cf4 File(selectedDirectory.getAbsolutePath() + \cf8 "/" \cf4 + project, \cf8 ".git"\cf4 );\
                \cf2 if \cf4 (!gitDir.exists()) \{\
                    initializeGitRepository(selectedDirectory.getAbsolutePath() + \cf8 "/" \cf4 + project);\
                \}\
            \}\
        \} \cf2 else \cf4 \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .warning(\cf8 "No directory selected"\cf4 );\
        \}\
    \}\
\
    \cf2 private void \cf7 loadRepositories\cf4 () \{\
        
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Loading repositories from GitHub"\cf4 );\
\
        \cf2 try \cf4 \{\
            GitHub github = \cf2 new \cf4 GitHubBuilder().withOAuthToken(\cf8 "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"\cf4 ).build();\
            List<String> repos = github.getMyself().getAllRepositories().values().stream()\
                    .map(GHRepository::getFullName)\
                    .collect(Collectors.
\f1\i toList
\f0\i0 ());\
            \cf5 repoComboBox\cf4 .getItems().setAll(repos);\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Repositories loaded: " \cf4 + repos);\
        \} \cf2 catch \cf4 (IOException e) \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .log(Level.
\f1\i \cf5 SEVERE
\f0\i0 \cf4 , \cf8 "Error loading repositories"\cf4 , e);\
            \cf5 webView\cf4 .getEngine().loadContent(\cf8 "<html><body><h1>Error: " \cf4 + e.getMessage() + \cf8 "</h1></body></html>"\cf4 );\
        \}\
    \}\
\
    \cf2 private void \cf7 displaySelectedRepo\cf4 () \{\
        String repoName = \cf5 repoComboBox\cf4 .getValue();\
        \cf2 if \cf4 (repoName != \cf2 null\cf4 ) \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Displaying repository: " \cf4 + repoName);\
            \cf5 webView\cf4 .getEngine().load(\cf8 "https://github.com/" \cf4 + repoName);\
        \} \cf2 else \cf4 \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .warning(\cf8 "No repository selected"\cf4 );\
        \}\
    \}\
\
    \cf2 private void \cf7 pushToGitHub\cf4 () \{\
        String projectPath = \cf5 projectComboBox\cf4 .getValue();\
        String repoName = \cf5 repoComboBox\cf4 .getValue();\
\
        \cf2 if \cf4 (projectPath == \cf2 null \cf4 || repoName == \cf2 null\cf4 ) \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .warning(\cf8 "Project or repository not selected"\cf4 );\
            \cf5 webView\cf4 .getEngine().loadContent(\cf8 "<html><body><h1>Error: Please select a project and a repository.</h1></body></html>"\cf4 );\
            \cf2 return\cf4 ;\
        \}\
\
        File gitDir = \cf2 new \cf4 File(projectPath, \cf8 ".git"\cf4 );\
        \cf2 if \cf4 (!gitDir.exists()) \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .warning(\cf8 "Selected project is not a Git repository: " \cf4 + projectPath);\
            \cf5 webView\cf4 .getEngine().loadContent(\cf8 "<html><body><h1>Error: Selected project is not a Git repository.</h1></body></html>"\cf4 );\
            \cf2 return\cf4 ;\
        \}\
\
        
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Pushing project to GitHub: " \cf4 + projectPath + \cf8 " -> " \cf4 + repoName);\
\
        \cf2 try \cf4 \{\
            Git git = Git.
\f1\i open
\f0\i0 (\cf2 new \cf4 File(projectPath));\
\
            \cf10 // Set the remote 'origin' URL explicitly\
            \cf4 git.remoteSetUrl()\
                    .setRemoteName(\cf8 "origin"\cf4 )\
                    .setRemoteUri(\cf2 new \cf4 URIish(\cf8 "https://github.com/" \cf4 + repoName + \cf8 ".git"\cf4 ))\
                    .call();\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Set remote 'origin' URL to: https://github.com/" \cf4 + repoName + \cf8 ".git"\cf4 );\
\
            git.add().addFilepattern(\cf8 "."\cf4 ).call();\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Files added to Git index"\cf4 );\
\
            git.commit().setMessage(\cf8 "Automated commit with JavaFX application"\cf4 ).setAllowEmpty(\cf2 true\cf4 ).call();\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Commit successful"\cf4 );\
\
            \cf10 // Directly use the GitHub token in the code\
            \cf4 String token = \cf8 "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"\cf4 ;\
\
            \cf10 // Get the current branch name dynamically\
            \cf4 String branchName = git.getRepository().getBranch();\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Current branch: " \cf4 + branchName);\
\
            git.push()\
                    .setCredentialsProvider(\cf2 new \cf4 UsernamePasswordCredentialsProvider(\cf8 "999Gabriel"\cf4 , token))\
                    .setRemote(\cf8 "origin"\cf4 )\
                    .add(branchName) \cf10 // Use the current branch name\
                    \cf4 .call();\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Push successful"\cf4 );\
            \cf5 webView\cf4 .getEngine().loadContent(\cf8 "<html><body><h1>Push Successful!</h1></body></html>"\cf4 );\
        \} \cf2 catch \cf4 (IOException | GitAPIException e) \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .log(Level.
\f1\i \cf5 SEVERE
\f0\i0 \cf4 , \cf8 "Error pushing to GitHub"\cf4 , e);\
            \cf5 webView\cf4 .getEngine().loadContent(\cf8 "<html><body><h1>Error: " \cf4 + e.getMessage() + \cf8 "</h1></body></html>"\cf4 );\
        \} \cf2 catch \cf4 (URISyntaxException e) \{\
            \cf2 throw new \cf4 RuntimeException(e);\
        \}\
    \}\
\
    \cf2 private void \cf7 initializeGitRepository\cf4 (String projectPath) \{\
        \cf2 try \cf4 \{\
            File gitDir = \cf2 new \cf4 File(projectPath, \cf8 ".git"\cf4 );\
            \cf2 if \cf4 (!gitDir.exists()) \{\
                InitCommand init = Git.
\f1\i init
\f0\i0 ();\
                init.setDirectory(\cf2 new \cf4 File(projectPath)).call();\
                
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Initialized a new Git repository at " \cf4 + projectPath);\
            \} \cf2 else \cf4 \{\
                
\f1\i \cf5 logger
\f0\i0 \cf4 .info(\cf8 "Git repository already exists at " \cf4 + projectPath);\
            \}\
        \} \cf2 catch \cf4 (GitAPIException e) \{\
            
\f1\i \cf5 logger
\f0\i0 \cf4 .log(Level.
\f1\i \cf5 SEVERE
\f0\i0 \cf4 , \cf8 "Error initializing Git repository"\cf4 , e);\
            \cf5 webView\cf4 .getEngine().loadContent(\cf8 "<html><body><h1>Error: " \cf4 + e.getMessage() + \cf8 "</h1></body></html>"\cf4 );\
        \}\
    \}\
\
    \cf2 public static void \cf7 main\cf4 (String[] args) \{\
        
\f1\i launch
\f0\i0 ();\
    \}\
\}\
}